from flask import Flask, request, jsonify, render_template_string, send_file
import os
import sqlite3
from datetime import datetime
import pandas as pd
import requests
from werkzeug.utils import secure_filename
import io

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
UPLOAD_FOLDER = 'uploads'
DB_PATH = 'checks.db'
ALLOWED_EXTENSIONS = {'xlsx', 'xls', 'csv'}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bankiros (–ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò!)
BANKIROS_TOKEN = "kOjFk444n6txgf6DFps"  # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
BANKIROS_URL = "https://api.mainfin.ru"  # Production —Å–µ—Ä–≤–µ—Ä
POSTBACK_URL = "https://bankiros-webhook.onrender.com/bankiros/postback"
OFFER_IDS = [459]  # ID –ú–§–û –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ê–ª—å—Ñ–∞ –±–∞–Ω–∫ –†–ö–û)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS checks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            check_id INTEGER UNIQUE,
            phone TEXT,
            employer_inn TEXT,
            offer_id INTEGER,
            status TEXT,
            created_at TIMESTAMP,
            updated_at TIMESTAMP
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS uploaded_files (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filename TEXT,
            original_filename TEXT,
            records_count INTEGER,
            sent_count INTEGER,
            error_count INTEGER,
            status TEXT,  -- 'uploaded', 'processing', 'completed', 'failed'
            created_at TIMESTAMP,
            completed_at TIMESTAMP
        )
    ''')

    # –°–≤—è–∑—å –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å —Ñ–∞–π–ª–∞–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS file_checks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            file_id INTEGER,
            check_id INTEGER,
            phone TEXT,
            employer_inn TEXT,
            FOREIGN KEY (file_id) REFERENCES uploaded_files (id),
            FOREIGN KEY (check_id) REFERENCES checks (check_id)
        )
    ''')

    conn.commit()
    conn.close()

init_db()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def format_phone_for_bankiros(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è API Bankiros –≤ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = ''.join(filter(str.isdigit, phone))

    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä (79XXXXXXXXX), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ +7XXXXXXXXXX
    if digits.startswith('7') and len(digits) == 11:
        return f"+{digits}"
    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä (89XXXXXXXXX), –∑–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ +7
    elif digits.startswith('8') and len(digits) == 11:
        return f"+7{digits[1:]}"
    # –ï—Å–ª–∏ –∏–º–µ–µ—Ç 10 —Ü–∏—Ñ—Ä (9XXXXXXXXX), –¥–æ–±–∞–≤–ª—è–µ–º +7
    elif len(digits) == 10 and digits.startswith('9'):
        return f"+7{digits}"
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –¥–æ–±–∞–≤–∏–≤ + –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    else:
        if not digits.startswith('+'):
            return f"+{digits}"
        return digits

# HTML —à–∞–±–ª–æ–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bankiros - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            padding: 40px;
        }
        
        h1 {
            color: #2C3E50;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 40px;
            font-size: 1.1em;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .stat-card h3 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .stat-card p {
            font-size: 1em;
            opacity: 0.9;
        }
        
        .section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .section h2 {
            color: #2C3E50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .file-upload {
            border: 3px dashed #667eea;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            background: white;
        }
        
        .file-upload:hover {
            border-color: #764ba2;
            background: #f0f0ff;
        }
        
        .file-upload input[type="file"] {
            display: none;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.1em;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            font-weight: bold;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0,0,0,0.3);
        }
        
        .btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
        }
        
        .btn-success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);
        }
        
        .progress-bar {
            width: 100%;
            height: 30px;
            background: #ecf0f1;
            border-radius: 15px;
            overflow: hidden;
            margin: 20px 0;
            display: none;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .message {
            padding: 15px 20px;
            border-radius: 10px;
            margin: 15px 0;
            display: none;
        }
        
        .message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .message.info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        
        .instructions {
            background: #fff3cd;
            border: 1px solid #ffc107;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
        }
        
        .instructions h3 {
            color: #856404;
            margin-bottom: 15px;
        }
        
        .instructions ol {
            margin-left: 20px;
        }
        
        .instructions li {
            margin: 8px 0;
            color: #856404;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç Bankiros - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π</h1>
        <p class="subtitle">–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
        
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="stats-grid" id="stats">
            <div class="stat-card">
                <h3 id="total">0</h3>
                <p>–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫</p>
            </div>
            <div class="stat-card">
                <h3 id="duplicates">0</h3>
                <p>–î—É–±–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ</p>
            </div>
            <div class="stat-card">
                <h3 id="new-clients">0</h3>
                <p>–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
            </div>
            <div class="stat-card">
                <h3 id="pending">0</h3>
                <p>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</p>
            </div>
        </div>
        
        <!-- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ -->
        <div class="instructions">
            <h3>üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</h3>
            <ol>
                <li>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ Excel/CSV —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ <strong>"—Ç–µ–ª–µ—Ñ–æ–Ω"</strong> –∏ <strong>"–ò–ù–ù"</strong></li>
                <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏" –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</li>
                <li>–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
            </ol>
        </div>
        
        <!-- –†–∞–∑–¥–µ–ª 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ -->
        <div class="section">
            <h2>üì§ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏</h2>
            <div class="file-upload" onclick="document.getElementById('fileInput').click()">
                <p style="font-size: 3em; margin-bottom: 10px;">üìÅ</p>
                <p style="font-size: 1.2em; color: #667eea; font-weight: bold;">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞</p>
                <p style="color: #7f8c8d; margin-top: 10px;">Excel (.xlsx, .xls) –∏–ª–∏ CSV —Ñ–∞–π–ª—ã</p>
                <input type="file" id="fileInput" accept=".xlsx,.xls,.csv" onchange="uploadFile()">
            </div>
            <div id="uploadMessage" class="message"></div>
        </div>
        
        <!-- –†–∞–∑–¥–µ–ª 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ -->
        <div class="section">
            <h2>üöÄ –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏</h2>
            <p style="margin-bottom: 20px; color: #7f8c8d;">–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</p>
            <button class="btn" id="sendBtn" onclick="sendChecks()" disabled>
                üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
            </button>
            <div class="progress-bar" id="progressBar">
                <div class="progress-fill" id="progressFill">0%</div>
            </div>
            <div id="sendMessage" class="message"></div>
        </div>
        
        <!-- –†–∞–∑–¥–µ–ª 3: –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤ -->
        <div class="section">
            <h2>üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫</h2>
            <p style="margin-bottom: 20px; color: #7f8c8d;">–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å</p>
            <div id="filesList" style="margin-bottom: 20px;">
                <p style="color: #7f8c8d;">–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...</p>
            </div>
            <button class="btn btn-success" onclick="loadFiles()">
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
            </button>
        </div>

        <!-- –†–∞–∑–¥–µ–ª 4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -->
        <div class="section">
            <h2>üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
            <p style="margin-bottom: 20px; color: #7f8c8d;">–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫</p>
            <button class="btn btn-success" onclick="downloadResults()">
                üíæ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)
            </button>
            <div id="downloadMessage" class="message"></div>
        </div>
        
        <!-- –†–∞–∑–¥–µ–ª 4: –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã -->
        <div class="section">
            <h2>üóëÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</h2>
            <p style="margin-bottom: 20px; color: #e74c3c;">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–æ–∫</p>
            <button class="btn btn-danger" onclick="clearDatabase()">
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            </button>
            <div id="clearMessage" class="message"></div>
        </div>
    </div>
    
    <script>
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        loadStats();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(loadStats, 10000);
        
        function loadStats() {
            fetch('/api/stats')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('total').textContent = data.total_checks;
                    document.getElementById('duplicates').textContent = data.duplicates;
                    document.getElementById('new-clients').textContent = data.not_duplicates;
                    document.getElementById('pending').textContent = data.pending;
                });
        }
        
        function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) return;
            
            const formData = new FormData();
            formData.append('file', file);
            
            showMessage('uploadMessage', 'info', '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...');
            
            fetch('/api/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('uploadMessage', 'success', `‚úÖ ${data.message} (${data.records} –∑–∞–ø–∏—Å–µ–π)`);
                    document.getElementById('sendBtn').disabled = false;
                } else {
                    showMessage('uploadMessage', 'error', `‚ùå ${data.message}`);
                }
            })
            .catch(error => {
                showMessage('uploadMessage', 'error', '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            });
        }
        
        function sendChecks() {
            if (!confirm('–ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É?\\n\\n–ü–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.')) {
                return;
            }
            
            document.getElementById('sendBtn').disabled = true;
            document.getElementById('progressBar').style.display = 'block';
            showMessage('sendMessage', 'info', '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 100 –ø—Ä–æ–≤–µ—Ä–æ–∫...');
            
            fetch('/api/send-checks', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('progressBar').style.display = 'none';
                
                if (data.success) {
                    let message = `‚úÖ ${data.message}\\n\\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${data.sent}\\n–û—à–∏–±–æ–∫: ${data.errors}\\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${data.total}`;
                    if (data.error_details && data.error_details.length > 0) {
                        message += `\\n\\nüìã –ü–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏:\\n${data.error_details.join('\\n')}`;
                    }
                    if (data.total > 100) {
                        message += `\\n\\n‚è≥ –û—Å—Ç–∞–ª—å–Ω—ã–µ ${data.total - 100} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ.\\n–û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.`;
                        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        startAutoRefresh();
                    }
                    showMessage('sendMessage', 'success', message);
                    loadStats();
                    loadFiles();
                } else {
                    showMessage('sendMessage', 'error', `‚ùå ${data.message}`);
                }
                
                document.getElementById('sendBtn').disabled = false;
            })
            .catch(error => {
                document.getElementById('progressBar').style.display = 'none';
                showMessage('sendMessage', 'error', '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫');
                document.getElementById('sendBtn').disabled = false;
            });
        }
        
        let autoRefreshInterval = null;
        
        function startAutoRefresh() {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            autoRefreshInterval = setInterval(() => {
                loadFiles();
                loadStats();
            }, 5000);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            setTimeout(() => {
                if (autoRefreshInterval) {
                    clearInterval(autoRefreshInterval);
                    autoRefreshInterval = null;
                }
            }, 300000);
        }
        
        function downloadResults() {
            showMessage('downloadMessage', 'info', '‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª...');
            
            window.location.href = '/api/download-results';
            
            setTimeout(() => {
                showMessage('downloadMessage', 'success', '‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω!');
            }, 1000);
        }
        
        function clearDatabase() {
            if (!confirm('‚ö†Ô∏è –í–´ –£–í–ï–†–ï–ù–´?\\n\\n–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!')) {
                return;
            }
            
            if (!confirm('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\\n\\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?')) {
                return;
            }
            
            fetch('/api/clear-database', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('clearMessage', 'success', '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
                    loadStats();
                } else {
                    showMessage('clearMessage', 'error', `‚ùå ${data.message}`);
                }
            });
        }
        
        function loadFiles() {
            const filesList = document.getElementById('filesList');
            filesList.innerHTML = '<p style="color: #7f8c8d;">–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...</p>';

            fetch('/api/files')
                .then(response => response.json())
                .then(data => {
                    if (data.files && data.files.length > 0) {
                        let html = '<div style="display: grid; gap: 15px;">';

                        data.files.forEach(file => {
                            const statusText = getStatusText(file.status);
                            const statusColor = getStatusColor(file.status);

                            html += `
                                <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; background: white;">
                                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                                        <h4 style="margin: 0; color: #2C3E50;">${file.filename}</h4>
                                        <span style="background: ${statusColor}; color: white; padding: 5px 10px; border-radius: 5px; font-size: 0.8em;">${statusText}</span>
                                    </div>
                                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; margin-bottom: 15px;">
                                        <div style="text-align: center;">
                                            <div style="font-size: 1.5em; font-weight: bold; color: #667eea;">${file.records_count}</div>
                                            <div style="font-size: 0.8em; color: #7f8c8d;">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</div>
                                        </div>
                                        <div style="text-align: center;">
                                            <div style="font-size: 1.5em; font-weight: bold; color: #28a745;">${file.not_duplicates}</div>
                                            <div style="font-size: 0.8em; color: #7f8c8d;">–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                                        </div>
                                        <div style="text-align: center;">
                                            <div style="font-size: 1.5em; font-weight: bold; color: #dc3545;">${file.duplicates}</div>
                                            <div style="font-size: 0.8em; color: #7f8c8d;">–î—É–±–ª–µ–π</div>
                                        </div>
                                        <div style="text-align: center;">
                                            <div style="font-size: 1.5em; font-weight: bold; color: #ffc107;">${file.pending}</div>
                                            <div style="font-size: 0.8em; color: #7f8c8d;">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
                                        </div>
                                    </div>
                                    <div style="display: flex; gap: 10px;">
                                        <button class="btn btn-success" style="font-size: 0.9em; padding: 8px 15px;" onclick="downloadFileResults(${file.id}, '${file.filename}')">
                                            üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                        </button>
                                        <div style="font-size: 0.8em; color: #7f8c8d; align-self: center;">
                                            –ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(file.created_at).toLocaleString('ru-RU')}
                                        </div>
                                    </div>
                                </div>
                            `;
                        });

                        html += '</div>';
                        filesList.innerHTML = html;
                    } else {
                        filesList.innerHTML = '<p style="color: #7f8c8d;">–§–∞–π–ª—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å</p>';
                    }
                })
                .catch(error => {
                    filesList.innerHTML = '<p style="color: #dc3545;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤</p>';
                });
        }

        function getStatusText(status) {
            switch(status) {
                case 'uploaded': return '–ó–∞–≥—Ä—É–∂–µ–Ω';
                case 'processing': return '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
                case 'completed': return '–ì–æ—Ç–æ–≤–æ';
                case 'failed': return '–û—à–∏–±–∫–∞';
                default: return status;
            }
        }

        function getStatusColor(status) {
            switch(status) {
                case 'uploaded': return '#17a2b8';
                case 'processing': return '#ffc107';
                case 'completed': return '#28a745';
                case 'failed': return '#dc3545';
                default: return '#6c757d';
            }
        }

        function downloadFileResults(fileId, filename) {
            showMessage('downloadMessage', 'info', `‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${filename}...`);
            window.location.href = `/api/download-file/${fileId}`;

            setTimeout(() => {
                showMessage('downloadMessage', 'success', '‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω!');
            }, 1000);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        loadFiles();

        function showMessage(elementId, type, text) {
            const element = document.getElementById(elementId);
            element.className = `message ${type}`;
            element.textContent = text;
            element.style.display = 'block';

            setTimeout(() => {
                element.style.display = 'none';
            }, 10000);
        }
    </script>
</body>
</html>
'''

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/stats')
def api_stats():
    """API: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM checks')
    total = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM checks WHERE status = "duplicate"')
    duplicates = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM checks WHERE status = "not_duplicate"')
    not_duplicates = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM checks WHERE status = "pending" OR status IS NULL')
    pending = cursor.fetchone()[0]
    
    conn.close()
    
    return jsonify({
        "total_checks": total,
        "duplicates": duplicates,
        "not_duplicates": not_duplicates,
        "pending": pending
    })

@app.route('/api/upload', methods=['POST'])
def api_upload():
    """API: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"""
    if 'file' not in request.files:
        return jsonify({"success": False, "message": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"})

    file = request.files['file']

    if file.filename == '':
        return jsonify({"success": False, "message": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"})

    if not allowed_file(file.filename):
        return jsonify({"success": False, "message": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"})

    try:
        filename = secure_filename(file.filename)
        original_filename = file.filename
        filepath = os.path.join(UPLOAD_FOLDER, f'clients_{int(datetime.now().timestamp())}.' + filename.rsplit('.', 1)[1])
        file.save(filepath)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if filepath.endswith('.csv'):
            df = pd.read_csv(filepath)
        else:
            df = pd.read_excel(filepath)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        df.columns = df.columns.str.strip().str.lower()

        if '—Ç–µ–ª–µ—Ñ–æ–Ω' not in df.columns or '–∏–Ω–Ω' not in df.columns:
            return jsonify({
                "success": False,
                "message": "–í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã '—Ç–µ–ª–µ—Ñ–æ–Ω' –∏ '–ò–ù–ù'"
            })

        records_count = len(df)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO uploaded_files (filename, original_filename, records_count, status, created_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (os.path.basename(filepath), original_filename, records_count, 'uploaded', datetime.now()))
        file_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return jsonify({
            "success": True,
            "message": f"–§–∞–π–ª '{original_filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
            "records": records_count,
            "file_id": file_id
        })

    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"})

@app.route('/api/send-checks', methods=['POST'])
def api_send_checks():
    """API: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ñ–æ–Ω–æ–≤–æ)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT id, filename FROM uploaded_files ORDER BY created_at DESC LIMIT 1')
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return jsonify({"success": False, "message": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª."})
        
        file_id, filename = result
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        
        print(f"DEBUG: file_id = {file_id}")
        print(f"DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {filepath}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(filepath):
            conn.close()
            return jsonify({"success": False, "message": f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ"})

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –Ω–∞ 'processing'
        cursor.execute('UPDATE uploaded_files SET status = ? WHERE id = ?', ('processing', file_id))
        conn.commit()
        conn.close()

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        if filepath.endswith('.csv'):
            df = pd.read_csv(filepath)
        else:
            df = pd.read_excel(filepath)

        print(f"DEBUG: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(df)} —Å—Ç—Ä–æ–∫")

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        df.columns = df.columns.str.strip().str.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if '—Ç–µ–ª–µ—Ñ–æ–Ω' not in df.columns or '–∏–Ω–Ω' not in df.columns:
            return jsonify({"success": False, "message": "–í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã '—Ç–µ–ª–µ—Ñ–æ–Ω' –∏ '–ò–ù–ù'"})

        sent = 0
        errors = 0
        error_details = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ñ–æ–Ω–æ–≤–æ
        batch_size = 100
        total_records = len(df)
        
        for index, row in df.head(batch_size).iterrows():
            phone = str(row['—Ç–µ–ª–µ—Ñ–æ–Ω']).strip()
            inn = str(row['–∏–Ω–Ω']).strip()
            phone_formatted = format_phone_for_bankiros(phone)

            print(f"DEBUG: [{index + 1}/{batch_size}] {phone} ‚Üí {phone_formatted}, –ò–ù–ù={inn}")

            result = send_check_to_bankiros(phone_formatted, inn, file_id)

            if result['success']:
                sent += 1
            else:
                errors += 1
                error_details.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1}: {result.get('error')}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE uploaded_files 
            SET sent_count = ?, error_count = ?
            WHERE id = ?
        ''', (sent, errors, file_id))
        conn.commit()
        conn.close()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if total_records > batch_size:
            import threading
            thread = threading.Thread(
                target=process_remaining_records,
                args=(file_id, filepath, batch_size)
            )
            thread.daemon = True
            thread.start()
            
            message = f"–ü–µ—Ä–≤—ã–µ {batch_size} –∑–∞–ø–∏—Å–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –û—Å—Ç–∞–ª—å–Ω—ã–µ {total_records - batch_size} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ."
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE uploaded_files 
                SET status = ?, completed_at = ?
                WHERE id = ?
            ''', ('completed', datetime.now(), file_id))
            conn.commit()
            conn.close()
            message = f"–í—Å–µ {total_records} –∑–∞–ø–∏—Å–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"

        response_data = {
            "success": True,
            "sent": sent,
            "errors": errors,
            "total": total_records,
            "message": message
        }

        if error_details:
            response_data["error_details"] = error_details[:10]

        return jsonify(response_data)

    except Exception as e:
        print(f"DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"})

def process_remaining_records(file_id, filepath, start_index):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π"""
    try:
        print(f"DEBUG: –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∏–Ω–¥–µ–∫—Å–∞ {start_index}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        if filepath.endswith('.csv'):
            df = pd.read_csv(filepath)
        else:
            df = pd.read_excel(filepath)
        
        df.columns = df.columns.str.strip().str.lower()
        
        sent = 0
        errors = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∏–Ω–∞—è —Å start_index
        for index, row in df.iloc[start_index:].iterrows():
            phone = str(row['—Ç–µ–ª–µ—Ñ–æ–Ω']).strip()
            inn = str(row['–∏–Ω–Ω']).strip()
            phone_formatted = format_phone_for_bankiros(phone)
            
            print(f"DEBUG: –§–æ–Ω [{index + 1}/{len(df)}] {phone_formatted}")
            
            result = send_check_to_bankiros(phone_formatted, inn, file_id)
            
            if result['success']:
                sent += 1
            else:
                errors += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            if (index - start_index + 1) % 10 == 0:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE uploaded_files 
                    SET sent_count = sent_count + ?, error_count = error_count + ?
                    WHERE id = ?
                ''', (sent, errors, file_id))
                conn.commit()
                conn.close()
                sent = 0
                errors = 0
                
                # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                import time
                time.sleep(1)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE uploaded_files 
            SET status = ?, sent_count = sent_count + ?, error_count = error_count + ?, completed_at = ?
            WHERE id = ?
        ''', ('completed', sent, errors, datetime.now(), file_id))
        conn.commit()
        conn.close()
        
        print(f"DEBUG: –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {errors}")
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        import traceback
        traceback.print_exc()
        
        # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ failed
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('UPDATE uploaded_files SET status = ? WHERE id = ?', ('failed', file_id))
        conn.commit()
        conn.close()

def send_check_to_bankiros(phone, employer_inn, file_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ Bankiros API"""
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Token {BANKIROS_TOKEN}"
    }

    payload = {
        "offerIds": OFFER_IDS,
        "formData": {
            "phone": phone,
            "is_accepted": "1",
            "employer_inn": employer_inn
        },
        "postbackUrl": POSTBACK_URL
    }

    try:
        response = requests.post(
            f"{BANKIROS_URL}/offers_partners_v1/partner-check-phone/import",
            headers=headers,
            json=payload,
            timeout=10
        )

        if response.status_code == 200:
            result = response.json()
            check_id = result.get('id')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO checks (check_id, phone, employer_inn, status, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (check_id, phone, employer_inn, 'pending', datetime.now()))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å —Ñ–∞–π–ª–æ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω file_id
            if file_id:
                cursor.execute('''
                    INSERT INTO file_checks (file_id, check_id, phone, employer_inn)
                    VALUES (?, ?, ?, ?)
                ''', (file_id, check_id, phone, employer_inn))

            conn.commit()
            conn.close()

            return {"success": True, "check_id": check_id}
        else:
            return {"success": False, "error": f"HTTP {response.status_code}"}

    except Exception as e:
        return {"success": False, "error": str(e)}

@app.route('/api/download-results')
def api_download_results():
    """API: –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        conn = sqlite3.connect(DB_PATH)
        df = pd.read_sql_query('''
            SELECT phone as "–¢–µ–ª–µ—Ñ–æ–Ω", 
                   employer_inn as "–ò–ù–ù",
                   status as "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏",
                   offer_id as "ID –ú–§–û",
                   updated_at as "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
            FROM checks
            ORDER BY updated_at DESC
        ''', conn)
        conn.close()
        
        # –°–æ–∑–¥–∞–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
        output.seek(0)
        
        return send_file(
            output,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            as_attachment=True,
            download_name=f'bankiros_results_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        )
        
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"})

@app.route('/api/files')
def api_files():
    """API: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, original_filename, records_count, sent_count, error_count,
                   status, created_at, completed_at
            FROM uploaded_files
            ORDER BY created_at DESC
            LIMIT 10
        ''')

        files = []
        for row in cursor.fetchall():
            file_id, original_filename, records_count, sent_count, error_count, status, created_at, completed_at = row

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–π–ª—É
            cursor.execute('''
                SELECT COUNT(*) FROM file_checks fc
                JOIN checks c ON fc.check_id = c.check_id
                WHERE fc.file_id = ? AND c.status = 'duplicate'
            ''', (file_id,))
            duplicates = cursor.fetchone()[0]

            cursor.execute('''
                SELECT COUNT(*) FROM file_checks fc
                JOIN checks c ON fc.check_id = c.check_id
                WHERE fc.file_id = ? AND c.status = 'not_duplicate'
            ''', (file_id,))
            not_duplicates = cursor.fetchone()[0]

            cursor.execute('''
                SELECT COUNT(*) FROM file_checks fc
                JOIN checks c ON fc.check_id = c.check_id
                WHERE fc.file_id = ? AND (c.status = 'pending' OR c.status IS NULL)
            ''', (file_id,))
            pending = cursor.fetchone()[0]

            files.append({
                "id": file_id,
                "filename": original_filename,
                "records_count": records_count,
                "sent_count": sent_count or 0,
                "error_count": error_count or 0,
                "status": status,
                "created_at": created_at,
                "completed_at": completed_at,
                "duplicates": duplicates,
                "not_duplicates": not_duplicates,
                "pending": pending
            })

        conn.close()
        return jsonify({"files": files})

    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"})

@app.route('/api/download-file/<int:file_id>')
def api_download_file(file_id):
    """API: –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        cursor.execute('SELECT filename, original_filename FROM uploaded_files WHERE id = ?', (file_id,))
        result = cursor.fetchone()
        if not result:
            conn.close()
            return jsonify({"success": False, "message": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"})

        filename, original_filename = result
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(filepath):
            conn.close()
            return jsonify({"success": False, "message": "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ"})
        
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        if filepath.endswith('.csv'):
            df = pd.read_csv(filepath)
        else:
            df = pd.read_excel(filepath)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        df_normalized = df.copy()
        df_normalized.columns = df_normalized.columns.str.strip().str.lower()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        if 'Check ID' not in df.columns:
            df['Check ID'] = ''
        if '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏' not in df.columns:
            df['–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏'] = ''
        if 'ID –ú–§–û' not in df.columns:
            df['ID –ú–§–û'] = ''
        if '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏' not in df.columns:
            df['–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'] = ''
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î (–≤–∫–ª—é—á–∞—è employer_inn –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –º–∞—Ç—á–∏–Ω–≥–∞)
        cursor.execute('''
            SELECT fc.phone, fc.employer_inn, c.check_id, c.status, c.offer_id, c.updated_at
            FROM file_checks fc
            JOIN checks c ON fc.check_id = c.check_id
            WHERE fc.file_id = ?
        ''', (file_id,))
        
        results = cursor.fetchall()
        conn.close()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ (phone_key, inn)
        results_dict = {}
        for phone, inn, check_id, status, offer_id, updated_at in results:
            phone_key = ''.join(filter(str.isdigit, str(phone)))
            inn_key = str(inn).strip()
            composite_key = (phone_key, inn_key)
            results_dict[composite_key] = {
                'check_id': check_id,
                'status': status,
                'offer_id': offer_id,
                'updated_at': updated_at
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        updated_count = 0
        for index, row in df_normalized.iterrows():
            phone = str(row['—Ç–µ–ª–µ—Ñ–æ–Ω']).strip()
            inn = str(row['–∏–Ω–Ω']).strip()
            phone_key = ''.join(filter(str.isdigit, phone))
            composite_key = (phone_key, inn)
            
            if composite_key in results_dict:
                result = results_dict[composite_key]
                df.at[index, 'Check ID'] = result['check_id']
                df.at[index, '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏'] = result['status'] or 'pending'
                df.at[index, 'ID –ú–§–û'] = result['offer_id'] or ''
                df.at[index, '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'] = result['updated_at'] or ''
                updated_count += 1
        
        print(f"DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î")

        # –°–æ–∑–¥–∞–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
        output.seek(0)

        return send_file(
            output,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            as_attachment=True,
            download_name=f'{original_filename}_results_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        )

    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"})

@app.route('/api/clear-database', methods=['POST'])
def api_clear_database():
    """API: –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM checks')
        cursor.execute('DELETE FROM uploaded_files')
        cursor.execute('DELETE FROM file_checks')
        conn.commit()
        conn.close()

        # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file in os.listdir(UPLOAD_FOLDER):
            os.remove(os.path.join(UPLOAD_FOLDER, file))

        return jsonify({"success": True})

    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"})

@app.route('/bankiros/postback', methods=['POST'])
def receive_postback():
    """Endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–æ—Å—Ç–±—ç–∫–æ–≤ –æ—Ç Bankiros"""
    try:
        data = request.get_json()
        
        offer_id = data.get('offerId')
        status = data.get('status')
        check_id = data.get('id')
        
        print(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç–±—ç–∫: ID={check_id}, OfferID={offer_id}, Status={status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE checks 
            SET offer_id = ?, status = ?, updated_at = ?
            WHERE check_id = ?
        ''', (offer_id, status, datetime.now(), check_id))
        conn.commit()
        conn.close()
        
        return jsonify({"success": True, "received": True}), 200
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–±—ç–∫–∞: {str(e)}")
        return jsonify({"success": False, "error": str(e)}), 400

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
