"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Bankiros API
–° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import pandas as pd
import sqlite3
import requests
import time
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DB_PATH = 'checks.db'
BANKIROS_TOKEN = "kOjFk444n6txgf6DFps"
BANKIROS_URL = "https://api.mainfin.ru"
POSTBACK_URL = "https://bankiros-webhook.onrender.com/bankiros/postback"
OFFER_IDS = [459]

def format_phone_for_bankiros(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è API Bankiros –≤ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"""
    digits = ''.join(filter(str.isdigit, str(phone)))
    
    if digits.startswith('7') and len(digits) == 11:
        return f"+{digits}"
    elif digits.startswith('8') and len(digits) == 11:
        return f"+7{digits[1:]}"
    elif len(digits) == 10 and digits.startswith('9'):
        return f"+7{digits}"
    else:
        if not digits.startswith('+'):
            return f"+{digits}"
        return digits

def send_check_to_bankiros(phone, employer_inn, file_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ Bankiros API"""
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Token {BANKIROS_TOKEN}"
    }
    
    payload = {
        "offerIds": OFFER_IDS,
        "formData": {
            "phone": phone,
            "is_accepted": "1",
            "employer_inn": employer_inn
        },
        "postbackUrl": POSTBACK_URL
    }
    
    try:
        response = requests.post(
            f"{BANKIROS_URL}/offers_partners_v1/partner-check-phone/import",
            headers=headers,
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            check_id = result.get('id')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO checks (check_id, phone, employer_inn, status, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (check_id, phone, employer_inn, 'pending', datetime.now()))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å —Ñ–∞–π–ª–æ–º
            cursor.execute('''
                INSERT INTO file_checks (file_id, check_id, phone, employer_inn)
                VALUES (?, ?, ?, ?)
            ''', (file_id, check_id, phone, employer_inn))
            
            conn.commit()
            conn.close()
            
            return {"success": True, "check_id": check_id}
        else:
            return {"success": False, "error": f"HTTP {response.status_code}"}
            
    except Exception as e:
        return {"success": False, "error": str(e)}

def process_file(file_id, filepath):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\n{'='*60}")
    print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {filepath}")
    print(f"File ID: {file_id}")
    print(f"{'='*60}\n")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    if filepath.endswith('.csv'):
        df = pd.read_csv(filepath)
    else:
        df = pd.read_excel(filepath)
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"–°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}\n")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    df_normalized = df.copy()
    df_normalized.columns = df_normalized.columns.str.strip().str.lower()
    
    if '—Ç–µ–ª–µ—Ñ–æ–Ω' not in df_normalized.columns or '–∏–Ω–Ω' not in df_normalized.columns:
        print("‚ùå –û–®–ò–ë–ö–ê: –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã '—Ç–µ–ª–µ—Ñ–æ–Ω' –∏ '–ò–ù–ù'")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
    if 'Check ID' not in df.columns:
        df['Check ID'] = ''
    if '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏' not in df.columns:
        df['–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏'] = ''
    if 'ID –ú–§–û' not in df.columns:
        df['ID –ú–§–û'] = ''
    if '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏' not in df.columns:
        df['–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'] = ''
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('UPDATE uploaded_files SET status = ? WHERE id = ?', ('processing', file_id))
    conn.commit()
    conn.close()
    
    sent = 0
    errors = 0
    batch_size = 10  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –∑–∞–ø–∏—Å–µ–π —Å –ø–∞—É–∑–æ–π
    
    for index, row in df_normalized.iterrows():
        phone = str(row['—Ç–µ–ª–µ—Ñ–æ–Ω']).strip()
        inn = str(row['–∏–Ω–Ω']).strip()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        phone_formatted = format_phone_for_bankiros(phone)
        
        print(f"[{index + 1}/{len(df)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {phone} ‚Üí {phone_formatted}, –ò–ù–ù={inn}")
        
        result = send_check_to_bankiros(phone_formatted, inn, file_id)
        
        if result['success']:
            check_id = result.get('check_id')
            df.at[index, 'Check ID'] = check_id
            df.at[index, '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏'] = 'pending'
            sent += 1
            print(f"  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, check_id={check_id}")
        else:
            df.at[index, '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏'] = f"Error: {result.get('error')}"
            errors += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
        
        # –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        if (index + 1) % batch_size == 0:
            print(f"\n‚è∏Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã... (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {index + 1}/{len(df)})")
            time.sleep(2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_path = filepath.replace('.xlsx', '_progress.xlsx').replace('.csv', '_progress.csv')
            if filepath.endswith('.csv'):
                df.to_csv(output_path, index=False)
            else:
                df.to_excel(output_path, index=False)
            print(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}\n")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    output_path = filepath.replace('.xlsx', '_with_results.xlsx').replace('.csv', '_with_results.csv')
    if filepath.endswith('.csv'):
        df.to_csv(output_path, index=False)
    else:
        df.to_excel(output_path, index=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE uploaded_files 
        SET status = ?, sent_count = ?, error_count = ?, completed_at = ?
        WHERE id = ?
    ''', ('completed', sent, errors, datetime.now(), file_id))
    conn.commit()
    conn.close()
    
    print(f"\n{'='*60}")
    print(f"‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"{'='*60}")
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
    print(f"–û—à–∏–±–æ–∫: {errors}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    print(f"{'='*60}\n")
    
    return output_path

if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT id, filename FROM uploaded_files ORDER BY created_at DESC LIMIT 1')
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
    else:
        file_id, filename = result
        filepath = os.path.join('uploads', filename)
        
        if not os.path.exists(filepath):
            print(f"‚ùå –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
        else:
            process_file(file_id, filepath)
